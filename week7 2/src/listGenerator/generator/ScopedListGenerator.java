package listGenerator.generator;

import arrayGenerator.scope.Scope;
import linkedList.list.SingleLinkedList;
import linkedList.list.LinkedList;
import linkedList.list.ListAccessError;
import linkedList.node.ListNode;
import listGenerator.generator.ListGenerator;

/**
 * A scoped list generator generates lists in which the generated elements fall within
 * a certain {@link Scope}.
 *
 * Unlike ScopedArrayGenerator we can instantiate ItemList's generically and thus do not need to create specific implementations of this class.
 *
 * @param <T> the type of object in the lists generated by this list generator.
 *
 * @author Ben Scott
 * @version December 2019
 *
 */

public class ScopedListGenerator<T> implements ListGenerator<T>
{

    private Scope<T> scope; // the listGenerator.scope of this generator

    public ScopedListGenerator(Scope<T> scope)
    {
        this.scope = scope;
    }

    public Scope<T> getScope()
    {
        return scope;
    }

    /**
     * Generate an list of random values (within this generator's listGenerator.scope).
     *
     * @param size the size of the list to be generated.
     * @return an list of the required size, containing random values from within the
     * permitted listGenerator.scope.
     * @throws ListAccessError
     *
     * @throws NegativeListSizeException if the size given is negative.
     */
    public SingleLinkedList<T> getList(int size) throws NegativeArraySizeException, ListAccessError
    {
        if (size < 0)
            throw new NegativeArraySizeException();

        SingleLinkedList<T> list = new SingleLinkedList<>();

        while (size-- > 0)
            list.add(0, scope.getValue());

        return list;
    }
}